/** @format */

const Joi = require('joi');

const { getArraySize } = require('../utils-gets-functions/getArraySize');
const express = require('express');
const router = express.Router();
router.use(express.json());
const {
	getRandomItemInArray,
} = require('../utils-gets-functions/getRandomItemInArray');
const {
	getItemInArrayById,
} = require('../utils-gets-functions/getItemInArrayById');
// base route./
/*  `Defining a route handler for the GET request to
the root URL ("/") of the server.ir returns all data */
const moongose = require('mongoose');

const dogNameSchema = new moongose.Schema({
	dogName: {
		type: String,
		required: true,
		minlenght: 3,
		maxlength: 10,
		trim: true,
	},
});

const data = () => DogName.find().sort('name');
const dataById = (id) => DogName.findById(id);

// isso eh o nome da colecao eu criei caleciones
const DogName = new moongose.model('dogs-names', dogNameSchema);

const createDogName = async ({ Name }) => {
	const dogname = new DogName({ dogName: Name });
	try {
		const result = await dogname.save();
		console.log(result);
	} catch (ex) {
		console.log('the error :' + ex.message);
	}
};

router.get('/allNames', async (req, res) => {
	const dogNames = await data();
	res.send(dogNames);
});

/* Defining a route handler for the GET request to the '/randomName' endpoint. When this
endpoint is accessed, it will generate a random dog name by calling the `getRandomItemInArray`
function and passing in the `data.data` array. The generated random dog name is then logged to the
console, along with the size of the `data.data` array. Finally, the random dog name is sent as the
response to the client. */
// router.get('/randomName', (req, res) => {

// 	const randomDogName = getRandomItemInArray(data.data);
// 	console.log(randomDogName);
// 	console.log(getArraySize(data.data));
// 	res.send(randomDogName);
// });

router.get('/randomName', async (req, res) => {
	const dogNames = await data();
	const randomDogName = getRandomItemInArray(dogNames);
	res.send(randomDogName);
});

/* Defining a route handler for the GET request to the '/id/:id' endpoint. Is send a name based on required id */
// router.get('/id/:id', (req, res) => {
// 	const id = parseInt(req.params.id);
// 	const name = getItemInArrayById(id, data.data, 'id');
// 	res.send(name);
// });
router.get('/id/:id', async (req, res) => {
	// const id = parseInt(req.params.id);
	const dogName = await dataById(req.params.id);
	const dog = JSON.parse(JSON.stringify(dogName));
	// console.log(dog.name);
	// console.log(typeof deu)
	// const deu3 = JSON.parse(dogName);
	// console.log(deu3)
	// console.log(dogName);
	// const notFunAnymore = await DogName.findOne({ "id": req.params.id }, 'name');
	// console.log(notFunAnymore);

	// console.log(dogName[2] + ' teste1');
	// console.log(dogName[name] + ' teste2'); name is not defined
	// console.log(data[dogName]);
	// console.log(typeof dogName);
	// TypeError: Cannot read properties of undefined (reading 'name')

	//console.log(dogName._name); // undefinide

	// console.log(dogName.name);

	// const dogRealName = { ...dogName };

	// const dogRealName = [ ...dogName ];
	// TypeError: dogName is not iterable

	// console.log(dogRealName.name + ' dogreal'); //[object Object]

	// console.log(dogName['name']);
	// console.log(dogName.name + ' teste4');
	// console.log(await dogName.select('name') + ' teste3');TypeError: dogName.select is not a function
	// console.log(dogName['id'] + ' teste3'); //esse funciona, por que o id eh interno do mongo
	// console.log(dogName['_name']);

	res.send(dog.name);
});
// {
// 	"_id": "655ce703439eca6b058fc6f8",
// 		"id": 177, "name": "Kiwi"
// }
/* Defining a route handler for the POST request to the '/allNames'
endpoint. */
// router.post('/allNames', (req, res) => {
// 	/* Defining a schema using the Joi library for validating the request body of a POST
// 	request. */
// 	const schema = Joi.object({
// 		name: Joi.string()
// 			.min(2)
// 			.pattern(/^[a-zA-Z]+$/)
// 			.required(),
// 	});
/* Using the Joi library to validate the request body of a POST request. */
// const { error, result } = schema.validate(req.body);
// if (error) {
// 	return res.status(400).send(` Please be attentive, ${error.message} `);
// }

/* Creating a new object called `newName` from the user input. */
/* The line `id: getArraySize(data.data) + 1` is assigning a unique ID to the new name being added to the `data.data` array.  The line `name: req.body.name` is assigning the value of the `name` property from the request body to the `name` property of the `newName` object. */
// 	const newName = {
// 		id: getArraySize(data.data) + 1,

// 		name: req.body.name,
// 	};
// 	// I am using unshift over push because its easy for me test the array in Postman.
// 	data.data.unshift(newName);
// 	res.send(newName);
// });

// 	const dogName = new DogName({
// 		name: name,
// 	});
// 	try {
// 		const result = await name.save();
// 		console.log(result);
// 		// the weird way of diong the same
// 		// course.validate((err) => {
// 		// 	if (err) {
// 		// 		console.log('error');
// 		// 	}
// 		// });
// 		// course;
// 	} catch (ex) {
// 		console.log('the error :' + ex.message);
// 	}
// };

// CreateDogName('Pipoca')

/* ` Exporting the `router` object so that it can be used in other files.
When a file is required using `require()`, the exported object is returned. In this case, the
`router` object is being exported so that it can be used in the main application file or any other
file that requires this router. */

module.exports = router;


/** @format */

const Joi = require('joi');

const { getArraySize } = require('../utils-gets-functions/getArraySize');
const express = require('express');
const router = express.Router();
router.use(express.json());
const {
	getRandomItemInArray,
} = require('../utils-gets-functions/getRandomItemInArray');
const {
	getItemInArrayById,
} = require('../utils-gets-functions/getItemInArrayById');
const moongose = require('mongoose');

const dogNameSchema = new moongose.Schema({
	dogName: {
		type: String,
		required: true,
		minlenght: 3,
		maxlength: 10,
		trim: true,
	},
});

const data = () => DogName.find().sort('dogName');
const dataById = (id) => DogName.findById(id);
const dataNameById = (id) => dataById(id).select({ _id: false, dogName: true });

// isso eh o nome da colecao eu criei caleciones
const DogName = new moongose.model('dogs-names', dogNameSchema);
// const createDogName = async ({ Name }) => {
// 	const name = new DogName({ name: Name });
// 	try {
// 		const result = await name.save();
// 		console.log(result);
// 	} catch (ex) {
// 		console.log('the error :' + ex.message);
// 	}
// };

// ___________*****_GET__ROUTES_*****___________________//
router.get('/allNames', async (req, res) => {
	const dogNames = await data();
	res.send(dogNames);
});

router.get('/randomName', async (req, res) => {
	const dogNames = await data();
	const randomDogName = getRandomItemInArray(dogNames);
	res.send(randomDogName);
});

router.get('/id/:id', async (req, res) => {
	const dogName = (await dataNameById(req.params.id)).toObject();
	res.send(dogName);
});

router.get('/name/:name', async (req, res) => {
	const dogName = (await dataNameById(req.params.name)).toObject();
	res.send(dogName);
});

// ___________*****_POST__ROUTES_*****___________________//

router.post('/allNames', async (req, res) => {
	const dogName = new DogName({ dogName: req.body.name });

	try {
		await dogName.save();
		console.debug(dogName);
	} catch (ex) {
		console.log('the error :' + ex.message);
	}

	res.send(dogName);
});

module.exports = router;


